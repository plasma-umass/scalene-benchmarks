{% if profiler_dict.use_austin -%}
#!/usr/bin/env python3
{%- endif %}
{%-if profiler_dict.use_tracemalloc %}
import tracemalloc
tracemalloc.start()
{%- elif profiler_dict.use_scalene %}
import scalene
{# {% elif profiler_dict.use_memory_profiler %}
import memory_profiler 
profile = memory_profiler.LineProfiler() #}
{%- elif profiler_dict.use_pympler %}
from pympler.asizeof import asizeof
{# from sys import getsizeof as asizeof #}
from collections import defaultdict
sizes = defaultdict(lambda : [])
{%- endif %}


import numpy as np


{% if profiler_dict.use_memory_profiler or profiler_dict.use_scalene -%}
@profile
{%- endif %}
def test_memory():
    indices = [{{indices | join(',')}}] # index
    {% if profiler_dict.use_pympler -%}
    sizes['index'].append(asizeof(indices))
    {% endif -%}
    for i in range({{num_iters}}): # loop1
        x = np.zeros(({{nrows}},{{ncols}})) # alloc
        {% if profiler_dict.use_pympler -%}
        sizes['alloc'].append(asizeof(x))
        {% endif -%}
        for idx in indices: # loop2
            x[idx][0] = 1 # touch1
    return x # endloop1

if __name__ == '__main__':
    {% if profiler_dict.use_tracemalloc%}
    snapshot1 = tracemalloc.take_snapshot()
    {% elif profiler_dict.use_scalene %}
    scalene.scalene_profiler.start()
    {% endif %}
    x = test_memory()
    {% if profiler_dict.use_scalene %}
    scalene.scalene_profiler.stop()
    {% elif profiler_dict.use_pympler%}
    import json
    print(json.dumps({k:  sum(v) / len(v) for k,v in sizes.items()} ))
    {% endif %}
