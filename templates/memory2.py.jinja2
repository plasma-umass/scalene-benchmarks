{% if profiler_dict.use_tracemalloc %}
import tracemalloc
tracemalloc.start()
{% elif profiler_dict.use_scalene %}
import scalene

{% elif profiler_dict.use_memory_profiler%}
import memory_profiler 
profile = memory_profiler.LineProfiler()
{% elif profiler_dict.use_pympler %}
from pympler.asizeof import asizeof
{# from sys import getsizeof as asizeof #}
from inspect import currentframe, getframeinfo
sizes = {}
{%endif %}
import numpy as np



{% if use_memory_profiler -%}
@profile
{%- endif %}
def test_memory():
    {% if profiler_dict.use_pympler -%}
    q = np.empty((2000,1000))
    sizes[getframeinfo(currentframe()).lineno] = asizeof(q)
    x = np.empty((2000,1000)) ; sizes[getframeinfo(currentframe()).lineno] = asizeof(x); del x
    {%- else%}
    np.empty((2000,1000))
    x = np.empty((2000,1000)) ; del x
    {%- endif%}
    
    
if __name__ == '__main__':
    {% if profiler_dict.use_tracemalloc%}
    snapshot1 = tracemalloc.take_snapshot()
    {% elif profiler_dict.use_scalene %}
    scalene.scalene_profiler.start()
    {% endif %}
    test_memory()
    {% if profiler_dict.use_tracemalloc %}
    snapshot2 = tracemalloc.take_snapshot()
    stats = snapshot2.compare_to(snapshot1, 'lineno')
    relevant_stats = [stat for stat in stats if __file__ in stat.traceback._frames[0][0]]
    jsonified_stats = [{'filename': stat.traceback._frames[0][0],
                        'lineno': stat.traceback._frames[0][1],
                        'size_diff': stat.size_diff} for stat in relevant_stats]
    import json
    print(json.dumps({'stats': jsonified_stats}))
    {% elif profiler_dict.use_scalene %}
    scalene.scalene_profiler.stop()
    {% elif profiler_dict.use_pympler%}
    import json
    print(json.dumps(sizes))
    {% endif %}