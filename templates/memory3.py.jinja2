{% if profiler_dict.use_austin -%}
#!/usr/bin/env python3
{%- endif %}
{%-if profiler_dict.use_tracemalloc %}
import tracemalloc
tracemalloc.start()
{% elif profiler_dict.use_scalene %}
import scalene
{% elif profiler_dict.use_memory_profiler %}
import memory_profiler 
profile = memory_profiler.LineProfiler()
{% elif profiler_dict.use_pympler %}
from pympler.asizeof import asizeof
{# from sys import getsizeof as asizeof #}
from collections import defaultdict
sizes = defaultdict(lambda : [])
{% endif %}

import numpy as np

ITS = 1000000
SIZE = 100000

def test_memory():
    for i in range({{num_iters}}):
        x0 = np.empty((1000, SIZE// 100)) # alloc1
        {% if profiler_dict.use_pympler -%}
        sizes['alloc1'].append(asizeof(x0))
        {% endif -%}
        for i in range(ITS // 100):
            x0[0] = 1 # touch1
        
        x = list(range(SIZE)) # alloc2
        {% if profiler_dict.use_pympler -%}
        sizes['alloc2'].append(asizeof(x))
        {% endif -%}
        for i in range(ITS):
            x[0] = 258 # alloc3
            {% if profiler_dict.use_pympler %}
            sizes['alloc3'].append(asizeof(x))
            {% endif %}

if __name__ == '__main__':
    {% if profiler_dict.use_tracemalloc%}
    snapshot1 = tracemalloc.take_snapshot()
    {% elif profiler_dict.use_scalene %}
    scalene.scalene_profiler.start()
    {% endif %}
    x = test_memory()
    {% if profiler_dict.use_tracemalloc %}
    snapshot2 = tracemalloc.take_snapshot()
    stats = snapshot2.compare_to(snapshot1, 'lineno')
    relevant_stats = [stat for stat in stats if __file__ in stat.traceback._frames[0][0]]
    jsonified_stats = [{'filename': stat.traceback._frames[0][0],
                        'lineno': stat.traceback._frames[0][1],
                        'size_diff': stat.size_diff} for stat in relevant_stats]
    import json
    print(json.dumps({'stats': jsonified_stats}))
    {% elif profiler_dict.use_scalene %}
    scalene.scalene_profiler.stop()
    {% elif profiler_dict.use_pympler%}
    import json
    print(json.dumps({k: {'total': sum(v), 'average': sum(v) / len(v)} for k,v in sizes.items()} ))
    {% endif %}
